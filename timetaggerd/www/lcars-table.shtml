<style>
		.rendered-table >thead >tr >th {
			border: 1px solid green;
			border-left: 0;
		}
		.rendered-table >thead >tr >th:first-child {
			border-left: 1px solid green;
		}
		.rendered-table >tbody >tr >td {
			border-bottom: 1px dashed green;
			border-right: 1px dashed green;
		}
		.rendered-table >tbody >tr:last-child >td {
			border-bottom: 1px solid green;
		}
		.rendered-table >tbody  >tr >td:first-child {
			border-left: 1px solid green;
		}
		.rendered-table >tbody  >tr >td:last-child {
			border-right: 0;
			border-bottom: 0;
		}
		.rendered-table >tbody >tr:first-child td {
			border-bottom: 1px solid green;
			border-right: 1px solid green;
		}
		
		input.rendered-table {
			font-family: lcars;
			border: 1px solid #9999CB; 
			background: #202020;
			color: #f5bd49;
			font-size: 14px;
		}
		input.rendered-table:focus {
			background: #404040;
		}
</style>

<script type="text/x-tmpl" id="lcars-table">
		<table class="rendered-table" cellspacing="0" cellpadding="5">
			<thead>
				<tr>
				</tr>
			</thead>
					<tbody>
						<tr class="rendered-table-empty"><td class="" colspan="5" align="center"> -no entries-</td></tr>
					</tbody>
				</table>
</script>

<script>

$.widget("lcars.table", {
	options: {
		columns: [], 
		rows:[],
		button_hook: false
	},


	_create: function () {
	
		var $element=this.element;

		var $widget=$(tmpl("lcars-table", {}));
		this.$widget=$widget;

		$element.append($widget);
	
		for (i in this.options) {
			this._setOption(i,this.options[i]);
		}		
	},

	_setOption: function(key, value) {
		switch(key) {
		case "columns": this._set_columns(value); break;
		case "rows": this._set_rows(value); break;
		case "button_hook": this.options.button_hook=value; break;
		}
	},
	
	_set_columns: function(columns) {
		$(">thead >tr th", this.$widget).remove();
		for (var n=0; n<columns.length; ++n) {
			var $td=$("<th>" + columns[n].title + "</th>");
			$(">thead >tr", this.$widget).append($td);
		}
		this.options.columns=columns;
		this._set_rows([]);
	},

	_set_row: function (row) {
		var trs=$(">tbody >tr.rendered-table", this.$widget);
		for (n=0; n<trs.length; ++n) {
			if ($(trs[n]).attr("row_id")==row.id) {				
				break;
			}
		}
		
		if (n>=trs.length) {
			var $tr=$("<tr row_id='"+ row.id + "'class='rendered-table'/>");

			for (n=0; n<this.options.columns.length; ++n) {
				var id=this.options.columns[n].id;
				var $td=$("<td col_id='"+id+"'>");
				if (this.options.columns[n].editable) {
					var $editor=$("<input class='rendered-table'/>");
					$editor.val(row[id]||"");
					$td.append($editor);
				} else {
					$td.text(row[id]);
				}
				$tr.append($td);
			}

			var $td=$("<td/>");
			if (this.options.button_hook) {
				this.options.button_hook($td, row);
			}
			$tr.append($td);
			$(">tbody", this.$widget).append($tr);	

		} else {
			//TODO
			var $tr=$(trs[n]);
		}

				
	},

	_set_rows: function(rows) {
		$(">tbody >tr.rendered-table", this.$widget).remove();
		if (rows.length==0) {
			$(">tbody tr.rendered-table-empty", this.$widget).show();
		} else {
			$(">tbody tr.rendered-table-empty", this.$widget).hide();
			for (var n=0; n<rows.length; ++n) {
				this._set_row(rows[n]);
			}
		}
		this.options.rows=rows;
	}, 

	update_rows: function(rows) {
		this._set_rows(rows);
		return;
		var row_ids={};
		for (var n=0; n<rows.length; ++n) {
			row_ids[rows[n].id]=rows[n];
		}
		var trs=$(">tbody >tr.rendered-table", this.$widget);
		for (var n=trs.length-1; n>=0; --n) {
			var id=$(trs[n]).attr("row_id");
			if (row_ids[n]) {
				this._set_row(row_ids[n]);
				row_ids[n]=false;
			} else {
				$(trs[n]).remove();
			}
		}
		for (var n in row_ids) {
			if (row_ids[n]) {
				this._set_row(row_ids[n]);
			}			
		}
	}

});

</script>


